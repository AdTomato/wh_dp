import '@/config/h3-form';

import {
  Component, Prop, Vue, Watch, Provide
} from 'vue-property-decorator';
import {
  Button, Modal, Table, Pagination, Checkbox, Icon, Tooltip
} from 'h3-antd-vue'; // todo

import {
  State, Action, namespace
} from 'vuex-class'; // todo

import { listApi, listParams } from '@cloudpivot/api';

import * as  applicationList from '@cloudpivot/list';

// import { utils } from '@/utils';  // todo

import * as Helper from '@cloudpivot/list/src/components/pc/helper/helper';
import { DataItemType } from '@cloudpivot/list/src/typings/data-items';

const WorkflowCenterModule = namespace('WorkflowCenter/WorkflowCenter');

import common from '@cloudpivot/common';
import CommonTable from '@cloudpivot/flow-center/src/components/pc/components/common-table/table.vue';

import { formApi } from "@cloudpivot/api";

import sheet from '@cloudpivot/form/src/renderer/components/pc/form-sheet/sheet.vue';

import env from "@/config/env";
import { getPxFromMm } from '@cloudpivot/common/src/utils/utils'

import columnSetting from '../components/column-setting.vue'

import filterCard from '../components/filter-card/filter-card.vue';

import printHtml from '../printHTML.vue';

import queryConditionHelper from '../helper/query-conditions';
import * as queryConditionTypings from '../helper/query-conditions.typings';

import * as platform from '@cloudpivot/platform';

///////// 方法抽离 ///////// 
import printQrCode from './printQrcode';

///////// 方法抽离 ///////// 

/**
 * 列宽数据接口
*/
interface WidthRecords {
  key: string,
  value: Array<Record>
}

interface Record {
  [key: string]: number
}


@Component({
  name: 'app-list',
  components: {
    sheet,
    CommonTable,
    printHtml,
    columnSetting: columnSetting,
    filterCard: filterCard,
    AButton: Button,
    AModal: Modal,
    ATable: Table,
    APagination: Pagination,
    ACheckbox: Checkbox,
    AIcon: Icon,
    ATooltip: Tooltip,
    DataImport: applicationList.components.pc.DataImport,
    DataUpload: applicationList.components.pc.DataUpload,
    DataImportStatus: applicationList.components.pc.DataImportStatus,
    QueryForm: applicationList.components.pc.QueryForm,
    DataExport: applicationList.components.pc.DataExport,
    PrintQrcode: applicationList.components.pc.PrintQrcode,
    PageNoData: common.components.pc.PageNoData,
    PageLoading: common.components.pc.PageLoading,
    PageLoadFail: common.components.pc.LoadFail
  }
})

export default class AppList extends Vue {
  @Prop({
    default: true
  }) showTitle!: boolean;

  /**
   * 集成到钉钉的垂直方向偏移量
   */
  @Prop() offset!: number;

  @Prop({ default: false }) isSPA!: boolean;

  @WorkflowCenterModule.State('applicationPageTitle') applicationPageTitle: any;

  @WorkflowCenterModule.Action('getDataItemList') getDataItemList: any;

  // 是否显示加载中
  isLoading: boolean = true;

  // 是否显示表格
  isShowTableBox: boolean = false;

  isShowTable: boolean = false;

  // 加载失败
  isShowLoadFailBox: boolean = false;

  // 记载完全部
  isShowLoadAll: boolean = false;

  // 加载无数据
  isShowNoData: boolean = false;

  // 搜索无数据
  isShowSearchNoData: boolean = false;

  curTitle: string = '';

  curTitleNameI18n: any = {};

  visible: boolean = false;

  isInitView: boolean = true;

  isUploading: boolean = false;

  canImport: boolean = false;

  isImporting: boolean = false;

  importPercent: number = 0;

  importStatus: listParams.ImportResult = listParams.ImportResult.Unspecified;

  isImportEnd: boolean = false;

  showDataExport: boolean = false;

  checkedLength: number = 0;

  showPrintQrcode: boolean = false;

  // networkError: boolean = false;

  // columnMatchError: boolean = false;

  // failMessage: string = '';

  successNum: number = 0;

  failNum: number = 0;

  importFileName: string = '';

  importrQueryField: string = '';

  // 表头固定
  scrollY: number = 0;

  scrollX: number = 0;

  // 自定义列去除序号和摘要
  cusColumns: Array<any> = [];

  // 标识初次加载列表
  firstLoad: boolean = true;

  columnSlots: any = {};

  rowSlots: any = {};

  rows: any = [];

  showColumnSetting: boolean = false;

  defaultColums: any = [];

  isShowPdf: boolean = false; // 是否展示pdf

  pdfUrl: string = '';

  opts: any = {};

  sheetCode: string = ''; // 批量打印二维码按钮绑定表单编码

  queryFormValues:any = ''; // 查询条件再赋值

  // 判断当前是否是中文版本
  get isChinese() {
    return this.$i18n.locale === 'zh';
  }

  get showUploadModel() {
    return this.isInitView;
  }

  get showImportModel() {
    return this.isImporting;
  }

  get showImportStatus() {
    return !this.isImporting && !this.isInitView && this.importStatus !== listParams.ImportResult.Unspecified;
  }

  get showConfirmButton() {
    return this.importStatus === listParams.ImportResult.DataNumExceed
      || this.importStatus === listParams.ImportResult.DataColumnError
      || this.importStatus === listParams.ImportResult.PartialSuccess;
    // return this.failNum > 0 || this.failMessage || this.columnMatchError;
  }

  get showReImportButton() {
    // return this.networkError;
    return this.importStatus === listParams.ImportResult.SystemError;
  }

  get showCancelButton() {
    return this.isInitView || this.importStatus === listParams.ImportResult.SystemError;
  }

  get schemaCode() {
    const { schemaCode } = this.$route.params;
    return schemaCode;
  }

  get recordKey() {
    const { schemaCode } = this.$route.params;
    return `${schemaCode}_width_records`;
  }

  get columnsOptsKey() {
    const { schemaCode } = this.$route.params;
    return `${schemaCode}_columns_options`;
  }


  adaptWidth: boolean = false;

  isShowFilterBox: boolean = false;

  data: any = {};

  columns: any[] = [];

  dataSource: any[] = [];

  queryActions: any[] = [];

  queryConditions: Array<listParams.QueryConditions> = [];

  // 是否显示分页器
  isShowPagination: boolean = true;

  total: number = 100;

  pageSize: number = 20;

  curPage: number = 1;

  // 分页配置项
  pageSizeOptions: string[] = ['10', '20', '50', '100'];

  filterData: Array<listParams.Filters> = [];

  // 是否全选
  isSelectAll: boolean = false;

  // 导出按钮置灰状态
  exportDisabled: boolean = false;

  // 删除按钮权限
  canDelete: boolean = false;

  // 列表显示字段
  queryColumns: any = [];

  checkeds: any = [];

  queryConditionSource: any = []; // 查询条件展示数组


  srcdoc:string = '';

  isDingTalk:any = true;

  // 删除按钮置灰状态
  get deleteDisabled() {
    return this.checkeds.some((c: boolean) => c);
  };

  mounted() {
    const records: string = window.localStorage.getItem(this.recordKey) as string;
    this.adaptWidth = !!records;

    // 获取数据项列表
    this.getDataItem().then(() => {
      this.getListConfigData();
    });

    document.title = `奥哲云枢-${this.applicationPageTitle}` || '奥哲云枢';


    this.$message.config({
      maxCount: 1,
      duration: 2
    });
    window.addEventListener('message', this.reloadMessage, false);

    // 监控视口变化
    window.addEventListener('resize', this.setTableMaxHeight, false);
  }


  destroyed() {
    window.removeEventListener('message', this.reloadMessage, false);
    window.removeEventListener('resize', this.setTableMaxHeight);
    this.$message.destroy();
  }

  onCheck(checkeds: boolean[]) {
    this.checkeds = checkeds;
  }

  /**
  * 展示搜索条件
  */
  toggleQueryConditions() {
    this.isShowFilterBox = !this.isShowFilterBox;
  }

  /**
   * 展示项设置弹窗
  */
  columnSetting() {
    this.showColumnSetting = true;
  }

  /*
  * 获取数据项列表
  */
  getDataItem() {
    return new Promise((resolve) => {
      const { schemaCode } = this.$route.params;
      const params = {
        schemaCode,
      };
      this.getDataItemList(params).finally(() => {
        resolve();
      });
    });
  }

  /*
  * 新增按钮打开新窗口新增表单后，关闭页面原列表刷新
  */
  reloadMessage(event: any) {
    if (event.source === window) return;
    if (event.data.indexOf('/application') !== -1 || event.data.indexOf('%2Fapplication') !== -1) {
      this.getQueryList();
    }
  }

  /*
  * 动态计算表格的最大高度
  */
  setTableMaxHeight() {
    this.$nextTick(() => {
      const table = this.$refs.table as HTMLElement;
      const tbody: HTMLElement = document.querySelector('.sheet__body') as HTMLElement;
      if (tbody) {
        tbody.style.maxHeight = `${table.clientHeight - 29}px`;
      }
    })
  }

  /**
   * 表格滚动条展示
  */
  setTableScroller() {
    this.$nextTick(() => {
      const tableBody: HTMLElement = document.querySelector('div.table') as HTMLElement;
      tableBody.onmouseenter = function () {
        tableBody.className = 'table active';
      }

      tableBody.onmouseleave = function () {
        tableBody.className = 'table';
      }
    })
  }

  showModal() {
    this.visible = true;
  }


  /**
   * 计算记录中列的宽度
  */
  caculateColWidth(columns: any): number {
    let colWidth: number = 0;
    const records: string = window.localStorage.getItem(this.recordKey) as string;

    if (records) {
      const recordJson: WidthRecords = JSON.parse(records) as WidthRecords;
      const item: Record = recordJson.value.find((item: Record) => Object.keys(item)[0] === columns.propertyCode) as Record;
      if (item) {
        colWidth = item[columns.propertyCode];
      } else {
        colWidth = columns.width ? Number(columns.width) : 176;
      }
    } else {
      colWidth = columns.width ? Number(columns.width) : 176;
    }
    return colWidth;
  }

  /*
  * 初始化表格表头信息
  */
  initColumns() {
    if (Array.isArray(this.data.queryColumns)) {
      this.data.queryColumns.forEach((colum: any) => {
        common.utils.compatible(colum, 'name');
      });
    };
    const columnsArray = this.data.queryColumns.filter((a: any) => a.propertyCode);
    let isShortText: boolean = true;
    if (columnsArray.some((c: any) => c.propertyCode === 'name')) {
      isShortText = false;
    }
    const columns: any[] = columnsArray.map((c: any) => {
      let colWidth: number = this.caculateColWidth(c);

      const back = {
        vcTitle: c.name,
        dataIndex: c.propertyCode,
        name_i18n: c.name_i18n,
        width: colWidth,
        propertyType: c.propertyType,
        isShortText: false,
        displayFormat: c.displayFormat,
        id: c.propertyCode,
        key: c.propertyCode,
        isShow: true
      };
      if (isShortText && c.propertyType === 0) {
        isShortText = false;
        back.isShortText = true;
      }
      if (c.propertyCode === 'name') {
        back.isShortText = true;
      }

      // 添加自定义列表头slot
      this.columnSlots[c.propertyCode] = `${c.propertyCode}Title`;

      // 添加自定义表体slot
      this.rowSlots[c.propertyCode] = `${c.propertyCode}Body`;

      return back;
    });
    this.defaultColums = JSON.parse(JSON.stringify(columns));

    // 判断是否存有记录
    const columnOpts: any = window.localStorage.getItem(this.columnsOptsKey);
    if (columnOpts) {
      const _column: any = JSON.parse(columnOpts);
      // this.cusColumns = _column.filter((col:any) => col.isShow);
      const showColumns = _column.filter((col: any) => col.isShow);
      // 记录列是否全在请求列中
      const isAllIncluded: boolean = showColumns.every((col: any) => !!columns.find((innerCol: any) => innerCol.key === col.key));
      if (isAllIncluded) {
        // 把剩余列修改成不显示
        const fCols: any = columns
          .map((col: any) => {
            const item: any = _column.find((innerCol: any) => col.key === innerCol.key);
            if (!item) { // 新增的展示列
              col.isShow = true;
              return col;
            }
          })
          .filter((col: any) => !!col);
        const _showColumns = _column.map((col:any) => {
          const item: any = columns.find((innerCol: any) => col.key === innerCol.key);
          if (item) {
            item.isShow = col.isShow;
            return item;
          }
        }).filter((col: any) => !!col);
        this.columns = _showColumns.concat(fCols);
        this.cusColumns = showColumns.concat(fCols);
      } else {
        // 记录列是否全不在请求列中
        let isAllNotInclude: boolean = true;
        showColumns.forEach((sCol: any) => {
          const f: boolean = !!columns.find((innerCol: any) => innerCol.key === sCol.key);
          if (!f) {
            isAllNotInclude = true;
          } else {
            isAllNotInclude = false;
          }
        })
        if (isAllNotInclude) { // 都不在，使用请求列，清空记录
          this.cusColumns = columns;
          this.columns = columns;
          window.localStorage.removeItem(this.columnsOptsKey);
        } else { // 部分在
          // 1. 找出展示列
          const sCols: any = showColumns.map((col: any) => {
            const c: any = columns.find((innerCol: any) => col.key === innerCol.key);
            if (c) {
              c.isShow = true;
              return c;
            }
          }).filter((col: any) => !!col);
          this.cusColumns = sCols;

          // 2. 把剩余列修改成不显示
          const fCols: any = columns
            .map((col: any) => {
              const item: any = sCols.find((innerCol: any) => col.key === innerCol.key);
              if (!item) {
                col.isShow = false;
                return col;
              }
            })
            .filter((col: any) => !!col);
          this.columns = sCols.concat(fCols);
        }
      }
    } else {
      this.cusColumns = JSON.parse(JSON.stringify(columns));
      this.columns = columns;
    }

    // columns.splice(0, 0, {
    //   width: 296,
    //   dataIndex: 'name',
    //   slots: { title: 'nameTitle' },
    //   scopedSlots: { customRender: 'name' }
    // });

    // columns.splice(0, 0, {
    //   width: 60,
    //   fixed: true,
    //   align: 'center',
    //   dataIndex: 'index',
    //   headSlot: 'indexTitle',
    //   bodySlot: 'index',
    //   id: 'orderNum_cus',
    //   key: 'orderNum_cus',
    //   slots: { title: 'indexTitle' },
    //   scopedSlots: { customRender: 'index' }
    // });

    // this.columnSlots['orderNum_cus'] = 'indexTitle';
    // this.rowSlots['orderNum_cus'] = 'index';

    // if (this.canDelete) {
    //     columns.splice(0, 0, {
    //     width: 60,
    //     fixed: true,
    //     align: 'center',
    //     dataIndex: 'checkbox',
    //     headSlot: 'checkboxTitle',
    //     bodySlot: 'checkbox',
    //     id: 'checkbox',
    //     key: 'checkbox'
    //   });
    //   this.columnSlots['checkbox'] = 'checkboxTitle';
    //   this.rowSlots['checkbox'] = 'checkbox';
    // }

    // 计算表格width
    this.scrollX = 0;
    columns.forEach((c: any) => {
      this.scrollX += c.width;
    });

    console.log('colus', columns);
  }

  /*
  * 分页改变
  */
  onPaginationChange(page: number, size: number) {
    this.curPage = page;
    this.getQueryList('pageChange');
    this.resetSelectAll(this);
  }

  /*
  * 分页pageSize改变
  */
  onSizeChange(current: number, size: number) {
    this.curPage = 1;
    this.pageSize = size;
    this.getQueryList('pageChange');
    this.resetSelectAll(this);
  }

  /*
  * 重新加载
  */
  reload() {
    this.getListConfigData();
  }

  /*
  * 列表按钮点击事件
  */
  actionClick(obj: listParams.QueryActions) {
    const type = obj.actionCode;
    if (type === 'add') {
      this.handleAdd(obj);
    } else if (type === 'delete') {
      // 点击删除按钮
      this.handleDeleteListData();
    } else if (type === 'import') {
      // 点击导入按钮
      this.showModal();
    } else if (type === 'export') {
      // 点击导出按钮
      this.showDataExport = true;
    } else if (type === 'qr_code') {
      // 点击打印二维码按钮
      const length = this.checkeds.filter((c: boolean) => c).length;
      this.checkedLength = length > 0 ? length : this.checkeds.length;
      this.showPrintQrcode = true;
    } else if (type === 'report') {
      /**
      * 新零售 AI货架定制化代码
      * START
      */
      const href = '/report';
      window.open(href, '_blank');
      /**
       * END
       */
    }
  }

  /*
  * 获取模型的配置信息
  */
  async getListConfigData() {
    const { schemaCode } = this.$route.params;
    const { queryCode } = this.$route.query;
    const params = {
      code: queryCode ? queryCode as string : '',
      schemaCode,
      source: 1
    }; // test datang01
    this.isLoading = true;
    const res = await listApi.getListConfigData(params);
    if (res.errcode === 0) {
      if (!res.data) {
        this.isShowLoadFailBox = true;
        this.isShowTableBox = false;
        return;
      }
      this.isShowLoadFailBox = false;

      if (res.data.name) {
        common.utils.compatible(res.data, 'name');
        this.curTitle = res.data.name;
        this.curTitleNameI18n = res.data.name_i18n;
      } else {
        this.curTitle = '';
        this.curTitleNameI18n = {};
      }

      if (!res.data || res.data.length === 0) return;

      if (!res.data.queryConditions || res.data.queryConditions.length <= 0) {
        // this.isShowFilterBox = false;
        this.getQueryList();
      } else {
        // this.isShowFilterBox = true;
        this.isShowTableBox = true;
        if (Array.isArray(res.data.queryConditions)) {
          res.data.queryConditions.forEach((condition: any) => {
            if (condition.propertyCode === 'sequenceStatus') {
              if (!condition.defaultValue) return;
              const vals_zh: Array<string> = condition.defaultValue.split(';')
              const vals_en: Array<string> = [];
              vals_zh.forEach((val: string) => {
                switch (val) {
                  case 'DRAFT':
                    vals_en.push('草稿');
                    break;
                  case 'PROCESSING':
                    vals_en.push('进行中');
                    break
                  case 'COMPLETED':
                    vals_en.push('已完成');
                    break
                  case 'CANCELED':
                    vals_en.push('已作废');
                    break
                  default:
                    break;
                }
              });
              condition.defaultValue = vals_en.join(';');
            }
            common.utils.compatible(condition, 'name');
            condition.name_i18n['zh'] = condition.name;
            condition.name_i18n = JSON.stringify(condition.name_i18n);
          });
        };
      }
      this.queryConditions = res.data.queryConditions;

      this.data = res.data;
      this.queryActions = res.data.queryActions;

      if (this.queryActions && Array.isArray(this.queryActions)) {
        // 本地调试代码--qrcodescan
        this.queryActions.push({
          actionCode: "qr_code",
          associationCode: 'sahngpin',
          associationType: 0,
          customService: false,
          icon: "download",
          id: "2c928e496be55caa016bf473716d011e",
          modifiedTime: "2019-07-31 16:51:23",
          name: "打印二维码",
          name_i18n: null,
          queryActionType: 8,
          queryId: "2c928e496be55caa016bf4737106010c",
          schemaCode: "sys",
          serviceCode: null,
          serviceMethod: null,
          sortKey: 3,
          systemAction: false
        });
        const deleteBtn = this.queryActions.filter((ac: any) => ac.actionCode === 'delete' || ac.actionCode === 'export');
        this.canDelete = !!deleteBtn.length;
        this.queryActions.forEach((action: any) => {
          if (action.actionCode === 'qr_code') {
            this.sheetCode = action.associationCode;
          }
          common.utils.compatible(action, 'name');
        });
      }
      if (res.data.queryColumns) {
        this.queryColumns = res.data.queryColumns;
        this.initColumns();
      }
      // this.getQueryList();
    } else {
      this.curTitle = '';
      this.curTitleNameI18n = {};
      this.isShowLoadFailBox = true;
      this.isShowTableBox = false;
      this.isLoading = false;
    }
  }

  /*
  * 获取查询条件
  */
  setFilterData(data: any) {
    const filterArray: any = [];
    const dataArray = Object.entries(data);
    this.queryFormValues = data;
    this.filterData = [];
    console.log(dataArray);
    dataArray.forEach((a: any) => {
      if (!a && !a[0]) {
        return;
      }
      const [key, value] = a;
      this.queryConditions.forEach((query: listParams.QueryConditions) => {
        let propertyValueName: string = '';
        if (key === query.propertyCode) {
          let propertyValue = value;
          if (Array.isArray(propertyValue)) {
            if (key === 'sequenceStatus') { // 后端传回来的只会是英文
              const sequenceStatus: any = [];
              propertyValue.forEach((pop: any) => {
                switch (pop) {
                  case '草稿':
                    return sequenceStatus.push('DRAFT');
                  case '进行中':
                    return sequenceStatus.push('PROCESSING');
                  case '已完成':
                    return sequenceStatus.push('COMPLETED');
                  case '已作废':
                    return sequenceStatus.push('CANCELED');
                  default:
                    break;
                }
              });
              propertyValue = sequenceStatus.join(';');
            } else if (propertyValue.length === 1 && query.propertyType === 2) {
              propertyValue = `${propertyValue};`;
            } else if (query.propertyType === DataItemType.StaffSelector) {
              propertyValue = JSON.stringify(propertyValue.map(p => ({
                id: p.id,
                unitType: p.unitType,
                name: p.name
              })));
            } else if (query.propertyType === DataItemType.Date && propertyValue.length === 2) {
              if (propertyValue[0] === propertyValue[1] && propertyValue[0] && propertyValue[1]) {
                propertyValue[0] = `${propertyValue[0]} 00:00:00`;
                propertyValue[1] = `${propertyValue[1]} 23:59:59`;
              }
              propertyValue = propertyValue.join(';');
            } else {
              propertyValue = propertyValue.join(';');
            }
          } else {
            switch (query.propertyType) {
              case DataItemType.RelevanceForm:
                propertyValue = value ? value.id : '';
                propertyValueName = value ? value.name : '';
                break;
              case DataItemType.Logic:
                propertyValue = value ? true : false;
                break;
              case DataItemType.Address:
                if (value && Object.keys(value).length > 0) {
                  propertyValue = JSON.stringify(propertyValue);
                } else {
                  propertyValue = null;
                }

                break;
              default:
                break;
            }
          }
          // propertyValue = `${propertyValue}`;
          filterArray.push({
            propertyCode: query.propertyCode,
            propertyType: query.propertyType,
            propertyValue,
            propertyValueName
          });
        }
      });
    });
    this.filterData = filterArray;
    // console.log(this.filterData, 'filterData');
    // console.log(this.queryConditions, 'queryConditions');

    // filterData 转化成展示项
    const cacheData:any = window.sessionStorage.getItem('filterData');
    let filterData = this.filterData;
    if (platform.IS_DINGTALK) {
      if(cacheData) {
        const data:any = JSON.parse(cacheData);
        filterData = data.filterData;
      }
    }
    const qcArr = queryConditionHelper.getValue(queryConditionTypings.CheckTypes.FromFilterData, this.queryConditions as any, filterData as any);
    this.queryConditionSource = qcArr;
    this.curPage = 1;
    const _type: string = this.firstLoad ? '' : 'search';
    this.getQueryList(_type);
    this.resetSelectAll(this);
  }

  /*
  * 查询列表数据参数
  */
  queryParamsFormater() {
    const { schemaCode } = this.$route.params;
    const { queryCode } = this.$route.query;
    // 取缓存种的查询条件 dingtalk
    const cacheData:any = window.sessionStorage.getItem('filterData');
    if (platform.IS_DINGTALK) {
      if (cacheData) {
        const data:any = JSON.parse(cacheData);
        this.curPage = data.curPage;
        this.pageSize = data.pageSize;
        this.filterData = data.filterData;
      }
    }
    const params: listParams.ExportDataParams = {
      filters: this.filterData,
      mobile: false,
      page: this.curPage - 1,
      queryCode: queryCode ? queryCode as string : '',
      schemaCode,
      size: this.pageSize
    };

    return params;
  }

  /*
  * 获取查询列表数据
  */
  async getQueryList(type?: string) {
    console.log('type....', type);
    const vm: any = this;
    this.dataSource = [];
    this.rows = [];
    const params = this.queryParamsFormater();
    this.isLoading = true;
    this.isShowTable = false;
    const res = await listApi.getQueryList(params);
    this.isShowTable = true;
    this.firstLoad = false;
    this.isLoading = false;
    this.isShowFilterBox = false;
    if (res.errcode === 0) {
      this.isShowTableBox = true;
      this.isShowLoadFailBox = false;
      if (!res.data) return;
      // 生成key 以及序号
      this.dataSource = [];
      if (res.data.content.length <= 0) {
        this.isShowLoadAll = false;
        this.isShowPagination = false;
        this.exportDisabled = true;
        if (type === 'search' || type === 'pageChange') {
          this.isShowNoData = false;
          this.isShowSearchNoData = true;
        } else {
          this.isShowNoData = true;
          this.isShowSearchNoData = false;
        }
        this.rowsFormatter(this.cusColumns);
        this.setTableScroller();
      } else {
        this.exportDisabled = false;
        res.data.content.forEach((item: any, index: number) => {
          // res.data.content[index].data.index = index + 1;
          // res.data.content[index].data.key = index;
          // res.data.content[index].data.isChecked = false;
          const obj: any = {};
          Object.entries(item.data).forEach((data: any, i: number) => {
            const [key, value] = data;
            if (value && typeof value === 'object') {
              if (Array.isArray(value)) {
                obj[key] = value.map(x => x.name || '').join();
              } else {
                obj[key] = value.name || value.address || '';
              }
            } else if (value === 'null') {
              obj[key] = null;
            } else if (typeof value === 'boolean') {
              obj[key] = value ? '是' : '否';
            } else {
              obj[key] = value;
            }

            const column: any = vm.columns.find((c: any) => c.dataIndex === key);
            if (value && column && column.propertyType === 10) {
              try {
                let address: any = JSON.parse(value);
                if (typeof address === 'string') {
                  address = JSON.parse(address);
                }
                // 省市区如果为空则展示空字符
                address.provinceName = address.provinceName ? address.provinceName : '';
                address.cityName = address.cityName ? address.cityName : '';
                address.districtName = address.districtName ? address.districtName : '';
                address.address = address.address ? address.address : '';

                obj[key] = `${address.provinceName}${address.cityName}${address.districtName}${address.address}`;
              } catch {
                console.log('位置控件格式正确！');
              }
            } else if (value && column && column.propertyType === 3) {
              // 日期数据项展示格式处理
              const date = new Date(value.replace(/-/g, '/')); // 修复safari/ie下日期转换问题
              const month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : `0${date.getMonth() + 1}`;
              const day = date.getDate() > 9 ? date.getDate() : `0${date.getDate()}`;
              const time = `${date.getFullYear()}-${month}-${day}`;
              const hours = date.getHours() > 9 ? date.getHours() : `0${date.getHours()}`;
              const minutes = date.getMinutes() > 9 ? date.getMinutes() : `0${date.getMinutes()}`;
              const seconds = date.getSeconds() > 9 ? date.getSeconds() : `0${date.getSeconds()}`;

              switch (column.displayFormat) {
                case 0:
                  break;
                case 1:
                  obj[key] = time;
                  break;
                case 2:
                  obj[key] = `${time} ${hours}:${minutes}:${seconds}`;
                  break;
                case 3:
                  obj[key] = `${time} ${hours}:${minutes}`;
                  break;
                default:
                  break;
              }
            }  else if (column && column.propertyType === 2) {
              // 数值数据项展示格式处理
              if (value === 0) {
                obj[key] = '0';
              } else if (value) {
                obj[key] = this.numberToDisplay(value, column);
              }
            }

            if (key === 'sequenceStatus') {
              switch (value) {
                case 'DRAFT':
                  obj[key] = '草稿';
                  break;
                case 'PROCESSING':
                  obj[key] = '进行中';
                  break;
                case 'COMPLETED':
                  obj[key] = '已完成';
                  break;
                case 'CANCELED':
                  obj[key] = '已作废';
                  break;
                default:
                  break;
              }
            }
            if (key === 'isChecked') {
              obj[key] = false;
            } else {
              obj[key] = obj[key] || '--';
            }
          });
          this.dataSource.push(obj);
        });

        this.rowsFormatter(this.cusColumns);

        // 显示全部加载完成
        this.isShowSearchNoData = false;
        this.isShowNoData = false;
        if (Math.ceil(res.data.totalElements / this.pageSize) <= 1) {
          this.isShowPagination = false;
          this.isShowLoadAll = true;
        } else {
          this.isShowPagination = true;
          if (res.data.content.length < this.pageSize) {
            this.isShowLoadAll = true;
          } else {
            this.isShowLoadAll = false;
          }
        }
        if (type === 'pageChange' || type === 'search') { // 切换pageSize,展示分页器
          this.isShowPagination = true;
        }

        this.setTableMaxHeight();

        this.setTableScroller();
        const columnOpts: any = window.localStorage.getItem(this.columnsOptsKey);
        if (columnOpts) {
          this.rowsFormatter(this.cusColumns);
        }
      }
      this.total = res.data.totalElements;

      this.addMarkColorBlock(this.dataSource);
    } else {
      this.isShowTableBox = false;
      this.isShowLoadFailBox = true;
    }

    // 设置缓存中默认值
    const cacheData:any = window.sessionStorage.getItem('filterData');
    if (platform.IS_DINGTALK) {
      if (cacheData) {
        const data:any = JSON.parse(cacheData);
        (this.$refs.queryForm as any).backWriteData(data.queryFormValues);
      }

      // 钉钉环境删除记录
      window.sessionStorage.removeItem('filterData');
    }
  }

  /**
   * 用色块标注进行中与草稿
   * @tableData 表格数据
  */
  addMarkColorBlock(tableData:any){
    if(!tableData) return;
    this.$nextTick(() => {
      const rowList:any = document.querySelectorAll('.sheet .sheet__body > .sheet__row') as NodeList;
      if (rowList) {
        rowList.forEach((row:HTMLElement, index:number) => {
          const markStatus:Array<string> = ['草稿', '进行中'];
          if (markStatus.indexOf(tableData[index].sequenceStatus) > -1) {
            row.classList.add('marked');
          }
        });
      }
    })
  }

  /*
  * 数值数据项展示格式处理
  */
  numberToDisplay(value:any, column:any) {
    let result:any = value;
    switch (column.displayFormat) {
      case 0:
        break;
      case 1:
        result = parseInt(result, 10).toLocaleString();
        break;
      case 2:
        result = this.addZero(Number(result.toFixed(2).slice(0,-1)).toLocaleString(), 1);
        break;
      case 3:
        result = this.addZero(Number(result.toFixed(3).slice(0,-1)).toLocaleString(), 2);
        break;
      case 4:
        result = `${parseInt(`${result}`, 10)}%`;
        break;
      case 5:
        result = `${(result).toFixed(2).slice(0,-1)}%`;
        break;
      case 6:
        result = `${(result).toFixed(3).slice(0,-1)}%`;
        break;
      case 7:
        result = `￥${this.addZero(Number(result.toFixed(3).slice(0,-1)).toLocaleString(), 2)}`;
        break;
      case 8:
        result = `$${this.addZero(Number(result.toFixed(3).slice(0,-1)).toLocaleString(), 2)}`;
        break;
      case 9:
        result = `€${this.addZero(Number(result.toFixed(3).slice(0,-1)).toLocaleString(), 2)}`;
        break;
      case 10:
        result = `HK$${this.addZero(Number(result.toFixed(3).slice(0,-1)).toLocaleString(), 2)}`;
        break;
      case 11:
        result = this.addZero(Number(result.toFixed(4).slice(0,-1)).toLocaleString(), 3);
        break;
      case 12:
        result = this.addZero(Number(result.toFixed(5).slice(0,-1)).toLocaleString(), 4);
        break;
      case 13:
        result = `${(result).toFixed(4).slice(0,-1)}%`;
        break;
      case 14:
        result = `${(result).toFixed(5).slice(0,-1)}%`;
        break;
      default:
        break;
    }
    return result;
  }

  /*
  * 小数点后补0函数
  */
  addZero(str:string, num:number) {
    if (str.indexOf('.') === -1) {
      let zero:string = '';
      for (var i = 0; i < num; i++) {
        zero += '0';
      }
      return `${str}.${zero}`;
    } else {
      const numLength = str.split('.')[1].length;
      if (numLength < num) {
        let zero:string = '';
        for (var i = 0; i < num - numLength; i++) {
          zero += '0';
        }
        return `${str}${zero}`;
      }
      return str;
    }
  }

  /**
   * 表格row格式化
   * @desc 将展示列的每一列整合到每一行
   * @params columns 共有多少列
   */
  rowsFormatter(columns: any) {
    const data: Array<any> = JSON.parse(JSON.stringify(this.dataSource));
    const newRows: any = [];
    data.forEach(() => {
      const _row: Array<any> = [];
      columns.forEach((col:any) => {
        _row.push({ key: col.key });
      });
      newRows.push(_row);
    });

    this.rows = newRows;
    this.checkeds = this.rows.map(() => false);
    return newRows; // 初次加载默认设置
  }

  /**
   * 字段排序筛选之后重新渲染表格
  */
  reRenderTable(columns: any) {
    this.cusColumns = columns.filter((col: any) => col.isShow);
    // 更新columns状态
    this.columns = columns;
    this.rowsFormatter(this.cusColumns);

    this.saveColumnsOpts(columns);

  }


  /**
   * 回复默认设置
   */
  recovery() {
    this.cusColumns = this.defaultColums;
    this.columns = this.defaultColums;
    this.rowsFormatter(this.defaultColums);

    window.localStorage.removeItem(this.columnsOptsKey);
  }

  /**
   * 字段信息存入本地缓存
  */
  saveColumnsOpts(columns: any) {
    const jsonStr: string = JSON.stringify(columns);
    window.localStorage.setItem(this.columnsOptsKey, jsonStr);
  }


  /*
  * 新增按钮
  */
  handleAdd(obj: listParams.QueryActions) {
    // debugger
    let url: string = '';
    const code = obj.associationCode;
    if (obj.associationType === 1) { // 关联流程
      url = `/form/detail?startWorkflowCode=${code}`;
    } else { // 关联表单
      const { schemaCode } = this.$route.params;
      url = `/form/detail?schemaCode=${schemaCode}&sheetCode=${code}`;
    }

    url += `&return=${location.pathname + encodeURIComponent(location.search)}`;

    if (platform.IS_DINGTALK) {
      // window.location.href = url;
      this.$router.push(url);
    } else {
      const opens = window.open(url);
    }
  }

  /*
  * 删除按钮
  */
  async handleDeleteListData() {
    const vm = this;
    const { schemaCode } = vm.$route.params;

    let _ids: string[] = [];
    const allObjectIds: any = [];
    this.checkeds.forEach((c: boolean, index: number) => {
      if (c) {
        _ids.push(this.dataSource[index].id);
      }
      allObjectIds.push(this.dataSource[index].id);
    });
    // 如果当前未勾选任何数据，默认全部生成
    if (_ids.length === 0) {
      _ids = allObjectIds;
    }

    const params: listParams.DeleteListParams = {
      ids: _ids,
      schemaCode
    };


    const res = await listApi.checkDeleteItems(params);
    if (res.errcode === 0 && Array.isArray(res.data)) {
      let countObj:any = {};
      res.data.forEach((data:any) => {
        switch (data.resultCode) {
          case 1000:
            countObj.count1 = data.objectIds ? data.objectIds.length : 0;
            break;
          case 1001:
            countObj.count2 = data.objectIds ? data.objectIds.length : 0;
            break;
          case 1002:
            countObj.count3 = data.objectIds ? data.objectIds.length : 0;
            break;
          case 1003:
            countObj.count4 = data.objectIds ? data.objectIds.length : 0;
            break;
          default:
            break;
        }
      });
      const h = this.$createElement;
      vm.$confirm({
        title: h('span', { class: 'delete-title' }, [`${vm.$t('cloudpivot.list.pc.DeleteItems').toString()}`]) , // 以下数据删除后不能恢复，确定要删除吗？
        content:  h('div',{ class: 'delete-content' }, [
          h('div', { class: {'hidden': !countObj.count1} }, [h('img', { attrs: {src: require('../image/dot.png')} }),'业务数据 ', h('span', `${countObj.count1}`), ' 条']),
          h('div', { class: {'hidden': !countObj.count2} }, [h('img', { attrs: {src: require('../image/dot.png')} }),'未关联父子流程的流程数据 ', h('span', `${countObj.count2}`), ' 条', h('p', {class: 'tip-text'}, '（数据删除后，将同步删除已产生的流程实例）')]),
          h('div', { class: {'hidden': !countObj.count3} }, [h('img', { attrs: {src: require('../image/dot.png')} }),'已关联子流程的父流程数据 ', h('span', `${countObj.count3}`), ' 条', h('p', {class: 'tip-text'}, '（父流程删除后将同步删除与其绑定的子流程数据及实例）')]),
          h('div', { class: {'hidden': !countObj.count4} }, [h('img', { attrs: {src: require('../image/dot.png')} }),'子流程数据 ', h('span', `${countObj.count4}`), ' 条', h('p', {class: 'tip-text'}, '（子流程删除后将同步删除实例及与父流程产生的映射关系）')]),
        ]),
        width: '520px',
        okText: this.$t('cloudpivot.list.pc.OK').toString(),
        cancelText: this.$t('cloudpivot.list.pc.Cancel').toString(),
        onOk() {
          vm.deleteListItems();
        },
        class: 'test',
        className: 'test1',

      } as any);
    }
  }

  /*
  * 删除列表项
  */
  async deleteListItems() {
    const vm = this;
    const _ids: string[] = [];
    this.checkeds.forEach((c: boolean, index: number) => {
      if (c) {
        _ids.push(vm.dataSource[index].id);
      }
    })
    // vm.dataSource.forEach((data: any) => {
    //   if (data.isChecked) {
    //     _ids.push(data.id);
    //   }
    // });
    const { schemaCode } = vm.$route.params;

    const params: listParams.DeleteListParams = {
      ids: _ids,
      schemaCode
    };

    const res = await listApi.deleteListData(params);
    if (res.errcode === 0) {
      // 当前为最后一页时，且删除了所有数据，把当前页码减一
      if (_ids.length === vm.dataSource.length && res.data.successCount === _ids.length && vm.curPage > 1) {
        vm.curPage -= 1;
      }

      if (res.data && res.data.errorCount > 0) {
        if (res.data.successCount === 0) {
          vm.$message.warning(this.$t('cloudpivot.list.pc.NoPermissionDelete'), 4);
        } else {
          vm.$message.warning(this.$t('cloudpivot.list.pc.DeleteItemsTips', { successCount: res.data.successCount, errorCount: res.data.errorCount }), 4);
        }
      }
      vm.resetSelectAll(vm);
      vm.getQueryList('delete');
    } else {
      vm.$message.error(this.$t('cloudpivot.list.pc.DeleteFailed'));
    }
  }

  /*
  * 导出列表
  */
  async handleExportData(data: any) {
    const params: any = this.queryParamsFormater();

    // utils.downloadFileByPost('/api/runtime/query/export_data', params);
    console.log('selectData', data);
    // 导出的数据项参数
    params.columns = data;

    // 20190604 导出一选中的项 isChecked
    params.objectIds = [];

    this.checkeds.forEach((c: boolean, index: number) => {
      if (c) {
        params.objectIds.push(this.dataSource[index].id)
      }
    })

    // 导出时传出所有的objectId
    params.allObjectId = [];

    this.checkeds.forEach((c: boolean, index: number) => {
      params.allObjectId.push(this.dataSource[index].id);
    })

    // this.dataSource.forEach((item:any) => {
    //   if(item.isChecked) {
    //     params.objectIds.push(item.id);
    //   }
    // })

    // 没有勾选，导出全部
    if (params.objectIds.length <= 0) {
      params.size = 0;
    }
    console.log(JSON.stringify(params))
    const res = await listApi.exportData(params);

    if (res.errcode && res.errcode !== 0) {
      this.$message.error(this.$t('cloudpivot.list.pc.ExportFailure'));
    } else {
      const blob = new Blob([res], { type: 'application/vnd.ms-excel' });
      const date = new Date();
      const mounth = date.getMonth() > 8 ? date.getMonth() + 1 : `0${date.getMonth() + 1}`;
      const days = date.getDate() > 9 ? date.getDate() : `0${date.getDate()}`;
      const hours = date.getHours() > 9 ? date.getHours() : `0${date.getHours()}`;
      const minutes = date.getMinutes() > 9 ? date.getMinutes() : `0${date.getMinutes()}`;
      const seconds = date.getSeconds() > 9 ? date.getSeconds() : `0${date.getSeconds()}`;

      const stamp = `${date.getFullYear()}${mounth}${days}${hours}${minutes}${seconds}`;
      const fileName = `${this.applicationPageTitle}导出${stamp}.xlsx`;

      if (window.navigator.msSaveOrOpenBlob) {
        navigator.msSaveBlob(blob, fileName);
      } else {
        const a = document.createElement('a');
        const url = URL.createObjectURL(blob);
        a.download = fileName;
        a.href = url;
        a.click();
        URL.revokeObjectURL(url);
      }
    }
  }

  /**
   * 获取每一列的数据
  */
  getLabelContent(column: any, rowIndex: number) {
    if (!column) return;
    const { dataIndex } = column;
    return this.dataSource[rowIndex][dataIndex];
  }

  /**
  * 打开表单
  */
  async goForm(column: any, rowIndex: number) {
    // const column:any = this.cusColumns.find((res:any) => res.dataIndex === dataIndex);
    // if (column && !column.isShortText) return;
    const rowData: any = this.dataSource[rowIndex];
    if (!rowData) return;
    const { schemaCode } = this.$route.params;
    const params: listParams.FormUrlParams = {
      bizObjectId: rowData.id,
      schemaCode,
    };
    const res = await listApi.getFormUrl(params);
    console.log('url', res);
    if (res) {
      const url = `${res}&return=${location.pathname + encodeURIComponent(location.search)}`;
      // const newWindow: any = platform.IS_DINGTALK ? window : window.open();
      // newWindow.location.href = url;
      if(platform.IS_DINGTALK){
        // 缓存查询条件
        const { curPage, filterData, queryFormValues, pageSize } = this;
        const cacheData:any = {curPage, filterData, queryFormValues, pageSize};
        window.sessionStorage.setItem('filterData', JSON.stringify(cacheData));
        this.$router.push(url);
      }else{
        window.open(url);
      }
    }
  }

  handleCancel() {
    this.visible = false;
    setTimeout(() => {
      this.reset();
    }, 1000);
  }

  confirmImport() {
    this.isInitView = false;
    this.isUploading = false;
    this.import();
  }

  /**
   * 开始导入数据
  */
  async import() {
    const params: listParams.ImportParams = {
      fileName: this.importFileName,
      schemaCode: this.schemaCode,
      queryCode: '',
      queryField: this.importrQueryField,
    };
    const res = await listApi.importData(params);
    if (res.errcode !== 0) {
      this.isImporting = false;
      this.importStatus = listParams.ImportResult.SystemError;
    } else {
      this.isImporting = true;
      this.simulateImport();
    }
  }

  /**
   * 模拟导入处理进度
   */
  simulateImport() {
    let percent = 1;
    const interval = setInterval(() => {
      if (!this.isImportEnd) {
        if (percent <= 90) {
          percent += this.random(5);
          this.importPercent = percent;
        }
      } else {
        clearInterval(interval);
      }
    }, 3000);
  }

  /**
   * 产生随机整数
  */
  random(num: number) {
    return Math.ceil(Math.random() * 5);
  }

  /**
   * 导入结束（不管成功与失败）
   */
  importEnd(data: any) { // 此处需要定义数据结构
    this.isImporting = false;
    this.isImportEnd = true;
    this.importFileName = data.fileName;
    this.successNum = data.successCount;
    this.failNum = data.errorCount;
    this.importStatus = data.errorType;
    if (data.errorType === 0 || data.errorType === 1) {
      this.getQueryList();
    }
  }

  confirm() {
    this.visible = false;
    setTimeout(() => {
      this.reset();
    }, 1000);
  }

  async reImport() {
    this.import();
  }

  reset() {
    this.isInitView = true;
    this.isUploading = false;
    this.isImporting = false;
    this.importPercent = 0;
    this.isImportEnd = false;
    this.successNum = 0;
    this.failNum = 0;
    this.importrQueryField = '';
    this.canImport = false;
    this.importStatus = listParams.ImportResult.Unspecified;
  }

  changeImportBtnStatus(status: boolean) {
    this.canImport = status;
  }

  setImportFileName(fileName: string) {
    this.importFileName = fileName;
  }

  setImportQueryField(queryField: string) {
    this.importrQueryField = queryField;
  }

  resetParams() {
    // 路由切换不会重新挂载页面
    this.filterData = [];
    this.pageSize = 20;
    this.curPage = 1;
  }

  // 重置全选、删除按钮
  resetSelectAll(vm: any) {
    vm.isSelectAll = false;
    this.$set(this, 'isSelectAll', false);
  }

  /**
   * 拖拽结束, 记录列宽
  */
  onResizeEnd(params: any) {
    const { width, column } = params;
    const colKey: string = column.id;
    const _item:any = this.columns.find((col:any) => col.id === colKey);
    if (_item) {
      _item.width = width;
    }
    const records: string = window.localStorage.getItem(this.recordKey) as string;
    if (records) {
      const recordJson: WidthRecords = JSON.parse(records) as WidthRecords;
      const item: Record = recordJson.value.find((item: Record) => Object.keys(item)[0] === colKey) as Record;
      if (item) { // update
        this.handleUpdateRecord(colKey, width);
      } else { // add
        this.handleAddRecord(colKey, width);
      }
    } else { // add
      this.handleAddRecord(colKey, width)
    }

    // 更新列信息记录中的宽度
    const columnOpts: any = window.localStorage.getItem(this.columnsOptsKey);
    if (columnOpts) {
      const cols: any = JSON.parse(columnOpts);
      const colItem: any = cols.find((col: any) => col.id === colKey);
      if (colItem) {
        colItem.width = width;
      }

      window.localStorage.setItem(this.columnsOptsKey, JSON.stringify(cols));
    }
  }

  /**
   * 新增列宽记录
   * @params colKey为每一列的id
   * @params width每一列的宽度
  */
  handleAddRecord(colKey: string, width: number) {
    const records: string = window.localStorage.getItem(this.recordKey) as string;
    let _records: any = {};
    if (records) { // 添加至原有记录
      const recordJson: WidthRecords = JSON.parse(records) as WidthRecords;
      recordJson.value.push({
        [colKey]: width
      });
      _records = recordJson;
    } else { // 创建一个记录
      const obj: WidthRecords = {
        key: this.recordKey,
        value: []
      };

      obj.value.push({
        [colKey]: width
      })

      _records = obj;
    }

    window.localStorage.setItem(this.recordKey, JSON.stringify(_records));
  }

  /**
   * 更新记录
   */
  handleUpdateRecord(colKey: string, width: number) {
    const records: string = window.localStorage.getItem(this.recordKey) as string;
    const recordJson: WidthRecords = JSON.parse(records) as WidthRecords;

    const item: Record = recordJson.value.find((item: Record) => Object.keys(item)[0] === colKey) as Record;
    if (!item) return;
    item[colKey] = width;

    window.localStorage.setItem(this.recordKey, JSON.stringify(recordJson));
  }

  /**
   * 清空
   */
  clear() {
    this.queryConditionSource = [];
    this.filterData = [];
    this.$nextTick(() => {
      const queryForm: any = this.$refs.queryForm;
      queryForm.clearFilters();

      this.getQueryList();
    })
  }

  /*
  * 构建打印二维码数据格式
  */
  createPrintQrCodeData(data: any) {
    printQrCode.createPrintQrCodeData(this, data);
  }

  hideQueryItem(){
    if (!this.isShowFilterBox) return;
    this.isShowFilterBox = false;
  }

  @Watch('applicationPageTitle')
  onApplicationPageTitleChange(v: any) {
    document.title = `奥哲云枢-${v}`;
  }

  @Watch('$route')
  onRouteChange() {
    this.rows = [];
    this.isShowTableBox = false;
    this.firstLoad = true;
    this.canDelete = false;
    const records: string = window.localStorage.getItem(this.recordKey) as string;
    this.adaptWidth = !!records;
    this.resetSelectAll(this);
    this.resetParams();
    this.getDataItem().then(() => {
      this.getListConfigData();
    });
  }

  @Watch('$i18n.locale')
  onLocalChange() {
    const loadAllBox = document.querySelector('.data-load-all');
    if (loadAllBox) {
      loadAllBox.innerHTML = `${this.$t('cloudpivot.list.pc.AllBeShown')}`;
    }
  }

  @Provide()
  getScrollEl() {
    return document.body.querySelector(".table-box") as HTMLDivElement;
  }
}
